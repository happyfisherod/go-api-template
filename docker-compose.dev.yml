version: "3.7"

services:
  app_api:
    build:
      context: .
      dockerfile: ./app/Dockerfile.api
      target: dev
    ports:
      - "8000:8000" # API
      - "8180:8180" # Health
      - "9400:9400" # Prometheus
      - "40000:40000" # Remote Debug
    security_opt:
      - "seccomp:unconfined"
    cap_add:
      - SYS_PTRACE
    depends_on:
      - kafka
      - schemaregistry
    env_file:
      - ./app/.env.api.test
    volumes:
      - ./app/src:/app
      - ./schemas:/app/schemas

  app_worker:
    build:
      context: .
      dockerfile: ./app/Dockerfile.worker
      target: dev
    ports:
      - "8001:8001"
      - "8181:8181"
      - "9401:9401" # Prometheus
      - "40001:40001" # Remote Debug
    security_opt:
      - "seccomp:unconfined"
    cap_add:
      - SYS_PTRACE
    depends_on:
      - kafka
      - schemaregistry
    env_file:
      - ./app/.env.worker.test
    volumes:
      - ./app/src:/app
      - ./schemas:/app/schemas

#  api:
#    build:
#      context: .
#      dockerfile: ./api/Dockerfile
#      target: test
#    ports:
#      - "8000:8000" # API
#      - "8180:8180" # Health
#      - "9400:9400" # Prometheus
#      - "40000:40000" # Remote Debug
#    security_opt:
#      - "seccomp:unconfined"
#    cap_add:
#      - SYS_PTRACE
#    depends_on:
#      - kafka
#      - schemaregistry
#    env_file:
#      - ./api/.env.test
#    volumes:
#      - ./api/src:/api
#      - ./schemas:/api/schemas

#  worker:
#    build:
#      context: .
#      dockerfile: worker/Dockerfile
#      target: test
#    ports:
#      - "9001:9001"
#      - "8181:8181"
#      - "40001:40001" # Remote Debug
#    security_opt:
#      - "seccomp:unconfined"
#    cap_add:
#      - SYS_PTRACE
#    depends_on:
#      - kafka
#      - schemaregistry
#    env_file:
#      - ./worker/.env.test
#    volumes:
#      - ./worker/src:/worker
#      - ./schemas:/worker/schemas

  mongo:
    image: mongo

  etl:
    image: geometrylabs/iconetl:${ICON_ETL_TAG:-latest}
    command: [
      "stream",
      "-o", "kafka:9092",
      "--period-seconds", "1",
      "--provider-uri", "http://134.122.40.114:9000/api/v3",
      "-b", "100",
    ]
    depends_on:
      - kafka
    restart: on-failure
    volumes:
      - "./last_synced_block.txt:/icon-etl/last_synced_block.txt"

  mongo-express:
    image: mongo-express
    depends_on:
      - mongo
    ports:
      - 8081:8081

## postgres
  postgres:
    #    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    #    restart: unless-stopped

  pgadmin:
    #    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - pgadmin:/root/.pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
#    restart: unless-stopped

volumes:
  postgres:
  pgadmin:
